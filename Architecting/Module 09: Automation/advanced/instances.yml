AWSTemplateFormatVersion: "2010-09-09"
Description: >
  This template is for provisioning of
  any resource that uses instances such as
  EC2 and RDS
Parameters:
  ProjectName:
    Description: Project Name to identify stack and infrastructure
    Type: String
  Environment:
    Description: Environment to deploy the Stack
    Type: String
    AllowedValues:
      - Stage
      - Prod
      - Test
      - Dev
  Changelog:
    Description: Changes made to this stack
    Type: String
    Default: Initial

  DbPassword:
    Description: Password for the Database
    Type: String
    NoEcho: true

Conditions:
  ProductionEnvironment:
    !Equals [!Ref Environment, Prod]

Resources:

  DbSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub ${ProjectName}-${Environment}-KYCDBSG
      GroupDescription: Allow postgres access only from within the security group
      VpcId:
        Fn::ImportValue:
          !Sub ${ProjectName}-${Environment}-Vpc

  SGDbIngress1:
    Type: 'AWS::EC2::SecurityGroupIngress'
    Properties:
      GroupId: !Ref DbSecurityGroup
      IpProtocol: tcp
      FromPort: 5432
      ToPort: 5432
      SourceSecurityGroupId: !Ref DbSecurityGroup

  SGDbIngress2:
    Type: 'AWS::EC2::SecurityGroupIngress'
    Properties:
      GroupId: !Ref DbSecurityGroup
      IpProtocol: tcp
      FromPort: 5432
      ToPort: 5432 
      SourceSecurityGroupId:
        Fn::ImportValue:
          !Sub ${ProjectName}-${Environment}-LambdaSecurityGroup

  Database:
    Type: 'AWS::RDS::DBInstance'
    Properties:
      AllocatedStorage: !If [ProductionEnvironment, "800", "100"]
      BackupRetentionPeriod: !If [ProductionEnvironment, '30', '7']
      DBInstanceClass: !If [ProductionEnvironment, "db.t3.large", "db.t3.small"]  
      DBInstanceIdentifier: !Sub ${ProjectName}-${Environment}-Db
      DBName: demo
      DBSubnetGroupName:
        Fn::ImportValue:
          !Sub ${ProjectName}-${Environment}-DbSubnetGroup
      Engine: postgres
      Iops: !If [ProductionEnvironment, 1000, 0]  
      MasterUsername: demo
      MasterUserPassword: !Ref DbPassword
      MultiAZ: !If [ProductionEnvironment, true, false] 
      Port: '5432'
      PubliclyAccessible: false
      StorageEncrypted: true
      StorageType: !If [ProductionEnvironment, io1, standard]  
      VPCSecurityGroups: 
        - !Ref DbSecurityGroup

  Bastion: 
    Type: "AWS::EC2::Instance"
    Properties: 
      ImageId: {{/aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-x86_64-gp2}}
      InstanceType: t2.micro
      NetworkInterfaces: 
        - AssociatePublicIpAddress: false
          DeviceIndex: "0"
          GroupSet: 
            - Fn::ImportValue:
                !Sub ${ProjectName}-${Environment}-LambdaSecurityGroup
          SubnetId: !Select
            - 1
            - !Split
              - ","
              - Fn::ImportValue:
                  !Sub ${ProjectName}-${Environment}-PrivateSubnets
          DeleteOnTermination: true
      Tags:
        - Key: Name
          Value: !Sub ${Environment}Bastion
        - Key: Environment
          Value: !Sub ${Environment}
      UserData:
        Fn::Base64: 
          !Sub |
            #!/bin/bash
            yum update -y
            yum install -y postgresql git
            curl --silent --location https://rpm.nodesource.com/setup_8.x | bash -
            yum -y install nodejs
            npm install -g sequelize-cli
            npm install -g pg

Outputs:

  DatabaseEndpoint:
    Value: !GetAtt Database.Endpoint.Address
    Export: 
      Name: !Sub ${ProjectName}-${Environment}-DatabaseEndpoint
  
  Changelog:
    Value: !Ref Changelog
    Description: Describe changes to this stack