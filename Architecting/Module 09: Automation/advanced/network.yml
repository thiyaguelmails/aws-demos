AWSTemplateFormatVersion: "2010-09-09"
Description: >
  This template is for provisioning of 
  VPC, Internet Gateway, Subnets, 
  NAT Gateway and Route Tables
Parameters:
  ProjectName:
    Description: Project Name to identify stack and infrastructure
    Type: String
  Environment:
    Description: Environment to deploy the Stack
    Type: String
    AllowedValues:
      - Stage
      - Prod
      - Test
      - Dev
  CidrBlock:
    Description: The primary CIDR Block for your VPC
    Type: String
    AllowedPattern: '((\d{1,3})\.){3}\d{1,3}/\d{1,2}'
    Default: 172.16.0.1/16
    ConstraintDescription: Invalid CIDR Block
  CidrBits:
    Description: The number of subnet bits for the CIDR. For example, specifying a value "8" for this parameter will create a CIDR with a mask of "/24".
    Type: Number
    Default: 8
    MinValue: 2
    MaxValue: 16
    ConstraintDescription: Invalid CIDR Bits
  CreateNatGateway:
    Description: Condition if NAT EIP will be created. Allowed Values are numbers between 0 and 3
    Type: Number
    MinValue: 0
    MaxValue: 3
    ConstraintDescription: Allowed Value is between 0-3 only
  OfficeIp:
    Type: String
    Default: "103.104.16.78/32"
    AllowedPattern: '((\d{1,3})\.){3}\d{1,3}/\d{1,2}'
  Changelog:
    Type: String
    Default: "Initial"

Conditions:
  ToCreateNat1: !Not [!Equals [!Ref CreateNatGateway, 0]]
  ToCreateNat2: !And
    - !Not [!Equals [!Ref CreateNatGateway, 0]]
    - !Not [!Equals [!Ref CreateNatGateway, 1]]
  ToCreateNat3: !Equals [!Ref CreateNatGateway, 3]
  ProductionEnvironment:
    !Equals [!Ref Environment, Prod]

Resources:
  ## VPC
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      EnableDnsSupport: true
      EnableDnsHostnames: true
      CidrBlock: !Ref CidrBlock
      Tags:
        - Key: Name
          Value: !Sub ${ProjectName}-${Environment}

  ## Internet Gateway
  InternetGateway:
    Type: AWS::EC2::InternetGateway

  VPCGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref VPC

  ## Subnets
  PublicSubnetA:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Select
        - 0
        - Fn::Cidr:
            - !Ref CidrBlock
            - 9
            - !Ref CidrBits
      AvailabilityZone: !Select
        - 0
        - Fn::GetAZs: !Ref "AWS::Region"
      Tags:
        - Key: Name
          Value: !Sub ${ProjectName}-${Environment}-PublicSubnetA

  PublicSubnetB:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Select
        - 1
        - Fn::Cidr:
            - !Ref CidrBlock
            - 9
            - !Ref CidrBits
      AvailabilityZone: !Select
        - 1
        - Fn::GetAZs: !Ref "AWS::Region"
      Tags:
        - Key: Name
          Value: !Sub ${ProjectName}-${Environment}-PublicSubnetB

  PublicSubnetC:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Select
        - 2
        - Fn::Cidr:
            - !Ref CidrBlock
            - 9
            - !Ref CidrBits
      AvailabilityZone: !Select
        - 2
        - Fn::GetAZs: !Ref "AWS::Region"
      Tags:
        - Key: Name
          Value: !Sub ${ProjectName}-${Environment}-PublicSubnetC

  PrivateSubnetA:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Select
        - 3
        - Fn::Cidr:
            - !Ref CidrBlock
            - 9
            - !Ref CidrBits
      AvailabilityZone: !Select
        - 0
        - Fn::GetAZs: !Ref "AWS::Region"
      Tags:
        - Key: Name
          Value: !Sub ${ProjectName}-${Environment}-PrivateSubnetA

  PrivateSubnetB:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Select
        - 4
        - Fn::Cidr:
            - !Ref CidrBlock
            - 9
            - !Ref CidrBits
      AvailabilityZone: !Select
        - 1
        - Fn::GetAZs: !Ref "AWS::Region"
      Tags:
        - Key: Name
          Value: !Sub ${ProjectName}-${Environment}-PrivateSubnetB

  PrivateSubnetC:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Select
        - 5
        - Fn::Cidr:
            - !Ref CidrBlock
            - 9
            - !Ref CidrBits
      AvailabilityZone: !Select
        - 2
        - Fn::GetAZs: !Ref "AWS::Region"
      Tags:
        - Key: Name
          Value: !Sub ${ProjectName}-${Environment}-PrivateSubnetC

  DBSubnetA:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Select
        - 6
        - Fn::Cidr:
            - !Ref CidrBlock
            - 9
            - !Ref CidrBits
      AvailabilityZone: !Select
        - 0
        - Fn::GetAZs: !Ref "AWS::Region"
      Tags:
        - Key: Name
          Value: !Sub ${ProjectName}-${Environment}-DBSubnetA

  DBSubnetB:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Select
        - 7
        - Fn::Cidr:
            - !Ref CidrBlock
            - 9
            - !Ref CidrBits
      AvailabilityZone: !Select
        - 1
        - Fn::GetAZs: !Ref "AWS::Region"
      Tags:
        - Key: Name
          Value: !Sub ${ProjectName}-${Environment}-DBSubnetB

  DBSubnetC:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Select
        - 8
        - Fn::Cidr:
            - !Ref CidrBlock
            - 9
            - !Ref CidrBits
      AvailabilityZone: !Select
        - 2
        - Fn::GetAZs: !Ref "AWS::Region"
      Tags:
        - Key: Name
          Value: !Sub ${ProjectName}-${Environment}-DBSubnetC

  ## NAT Gateway
  NatIp1:
    Type: AWS::EC2::EIP
    Condition: ToCreateNat1
    Properties:
      Domain: vpc

  NatIp2:
    Type: AWS::EC2::EIP
    Condition: ToCreateNat2
    Properties:
      Domain: vpc

  NatIp3:
    Type: AWS::EC2::EIP
    Condition: ToCreateNat3
    Properties:
      Domain: vpc

  NatGateway1:
    Type: AWS::EC2::NatGateway
    DependsOn: VPCGatewayAttachment
    Condition: ToCreateNat1
    Properties:
      AllocationId:
        Fn::GetAtt:
          - NatIp1
          - AllocationId
      SubnetId: !Ref PublicSubnetA
      Tags:
        - Key: Name
          Value: !Sub ${ProjectName}-${Environment}-NATGateway1

  NatGateway2:
    Type: AWS::EC2::NatGateway
    DependsOn: VPCGatewayAttachment
    Condition: ToCreateNat2
    Properties:
      AllocationId:
        Fn::GetAtt:
          - NatIp2
          - AllocationId
      SubnetId: !Ref PublicSubnetB
      Tags:
        - Key: Name
          Value: !Sub ${ProjectName}-${Environment}-NATGateway2

  NatGateway3:
    Type: AWS::EC2::NatGateway
    DependsOn: VPCGatewayAttachment
    Condition: ToCreateNat3
    Properties:
      AllocationId:
        Fn::GetAtt:
          - NatIp3
          - AllocationId
      SubnetId: !Ref PublicSubnetC
      Tags:
        - Key: Name
          Value: !Sub ${ProjectName}-${Environment}-NATGateway3

  ## Route Tables
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${ProjectName}-${Environment}-PublicRoute1

  PublicDefaultRoute:
    Type: AWS::EC2::Route
    DependsOn: VPCGatewayAttachment
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  PublicSubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnetA
      RouteTableId: !Ref PublicRouteTable

  PublicSubnetRouteTableAssociation2:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnetB
      RouteTableId: !Ref PublicRouteTable

  PublicSubnetRouteTableAssociation3:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnetC
      RouteTableId: !Ref PublicRouteTable

  PrivateRouteTable1:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${ProjectName}-${Environment}-PrivateRoute1

  PrivateRouteTable2:
    Type: AWS::EC2::RouteTable
    Condition: ToCreateNat2
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${ProjectName}-${Environment}-PrivateRoute2

  PrivateRouteTable3:
    Type: AWS::EC2::RouteTable
    Condition: ToCreateNat3
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${ProjectName}-${Environment}-PrivateRoute3

  PrivateDefaultRouteNatGateway1:
    Type: AWS::EC2::Route
    Condition: ToCreateNat1
    Properties:
      RouteTableId: !Ref PrivateRouteTable1
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGateway1

  PrivateDefaultRouteNatGateway2:
    Type: AWS::EC2::Route
    Condition: ToCreateNat2
    Properties:
      RouteTableId: !Ref PrivateRouteTable2
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGateway2

  PrivateDefaultRouteNatGateway3:
    Type: AWS::EC2::Route
    Condition: ToCreateNat3
    Properties:
      RouteTableId: !Ref PrivateRouteTable3
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGateway3

  PrivateSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnetA
      RouteTableId: !Ref PrivateRouteTable1

  PrivateSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnetB
      RouteTableId:
        !If [ToCreateNat2, !Ref PrivateRouteTable2, !Ref PrivateRouteTable1]

  PrivateSubnet3RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnetC
      RouteTableId:
        !If [ToCreateNat3, !Ref PrivateRouteTable3, !Ref PrivateRouteTable1]

  DBRouteTable1:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Join ["-", [!Ref VPC, "DB-Route"]]

  DBSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref DBSubnetA
      RouteTableId: !Ref DBRouteTable1

  DBSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref DBSubnetB
      RouteTableId: !Ref DBRouteTable1

  DBSubnet3RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref DBSubnetC
      RouteTableId: !Ref DBRouteTable1

  # NACL

  PublicNacl:
    Type: AWS::EC2::NetworkAcl
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: Public-NACL

  PublicNACLIngress100:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref PublicNacl
      RuleNumber: 100
      Protocol: 6
      RuleAction: allow
      CidrBlock: !Ref OfficeIp
      PortRange:
        From: 22
        To: 22

  PublicNACLIngress200:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref PublicNacl
      RuleNumber: 200
      Protocol: 6
      PortRange:
        From: 0
        To: 65535
      RuleAction: allow
      CidrBlock: !Ref CidrBlock

  PublicNACLIngress300:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref PublicNacl
      RuleNumber: 300
      Protocol: 6
      PortRange:
        From: 1024
        To: 65535
      RuleAction: allow
      CidrBlock: 0.0.0.0/0

  PublicNACLEgress100:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref PublicNacl
      RuleNumber: 100
      Protocol: -1
      Egress: True
      RuleAction: allow
      CidrBlock: 0.0.0.0/0

  PrivateNacl:
    Type: AWS::EC2::NetworkAcl
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: Private-NACL

  PrivateNACLIngress100:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref PrivateNacl
      RuleNumber: 100
      Protocol: 6
      RuleAction: allow
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: 1024
        To: 65535

  PrivateNACLEgress100:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref PrivateNacl
      RuleNumber: 100
      Protocol: -1
      Egress: True
      RuleAction: allow
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: 0
        To: 65535

  DBNacl:
    Type: AWS::EC2::NetworkAcl
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: DB-NACL

# Allows private subnet A
  DbNACLIngress100:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref DBNacl
      RuleNumber: 100
      Protocol: 6
      RuleAction: allow
      CidrBlock: !Select
        - 3
        - Fn::Cidr:
            - !Ref CidrBlock
            - 9
            - !Ref CidrBits
      PortRange:
        From: 5432
        To: 5432

# Allows private subnet B
  DbNACLIngress200:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref DBNacl
      RuleNumber: 200
      Protocol: 6
      RuleAction: allow
      CidrBlock: !Select
        - 4
        - Fn::Cidr:
            - !Ref CidrBlock
            - 9
            - !Ref CidrBits
      PortRange:
        From: 5432
        To: 5432

# Allows private subnet C
  DbNACLIngress300:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref DBNacl
      RuleNumber: 300
      Protocol: 6
      RuleAction: allow
      CidrBlock: !Select
        - 5
        - Fn::Cidr:
            - !Ref CidrBlock
            - 9
            - !Ref CidrBits
      PortRange:
        From: 5432
        To: 5432

  # Allows private subnet A
  DbNACLEgress100:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref DBNacl
      RuleNumber: 100
      Protocol: 6
      Egress: True
      RuleAction: allow
      CidrBlock: !Select
        - 3
        - Fn::Cidr:
            - !Ref CidrBlock
            - 9
            - !Ref CidrBits
      PortRange:
        From: 1024
        To: 65535

  # Allows private subnet B
  DbNACLEgress200:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref DBNacl
      RuleNumber: 200
      Protocol: 6
      Egress: True
      RuleAction: allow
      CidrBlock: !Select
        - 4
        - Fn::Cidr:
            - !Ref CidrBlock
            - 9
            - !Ref CidrBits
      PortRange:
        From: 1024
        To: 65535

  # Allows private subnet C
  DbNACLEgress300:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref DBNacl
      RuleNumber: 300
      Protocol: 6
      Egress: True
      RuleAction: allow
      CidrBlock: !Select
        - 5
        - Fn::Cidr:
            - !Ref CidrBlock
            - 9
            - !Ref CidrBits
      PortRange:
        From: 1024
        To: 65535

  ## Subnet and Network ACL Association
  PublicSubnetNacl1:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      SubnetId: !Ref PublicSubnetA
      NetworkAclId: !Ref PublicNacl

  PublicSubnetNacl2:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      SubnetId: !Ref PublicSubnetB
      NetworkAclId: !Ref PublicNacl

  PublicSubnetNacl3:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      SubnetId: !Ref PublicSubnetC
      NetworkAclId: !Ref PublicNacl

  PrivateSubnetNacl1:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      SubnetId: !Ref PrivateSubnetA
      NetworkAclId: !Ref PrivateNacl

  PrivateSubnetNacl2:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      SubnetId: !Ref PrivateSubnetB
      NetworkAclId: !Ref PrivateNacl

  PrivateSubnetNacl3:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      SubnetId: !Ref PrivateSubnetC
      NetworkAclId: !Ref PrivateNacl

  DBSubnetNacl1:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      SubnetId: !Ref DBSubnetA
      NetworkAclId: !Ref DBNacl

  DBSubnetNacl2:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      SubnetId: !Ref DBSubnetB
      NetworkAclId: !Ref DBNacl

  DBSubnetNacl3:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      SubnetId: !Ref DBSubnetC
      NetworkAclId: !Ref DBNacl

  DBSubnetGroup:
    Type: "AWS::RDS::DBSubnetGroup"
    Properties:
      DBSubnetGroupDescription: "DB Subnet Group for PDAX's RDS Instances"
      SubnetIds:
        - !Ref DBSubnetA
        - !Ref DBSubnetB
        - !Ref DBSubnetC
      Tags:
        - Key: "Name"
          Value: !Sub "PDAX ${Environment} RDS Subnet Group"

  LambdaSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub ${Environment}${ProjectName}LambdaSG
      GroupDescription: Allow access to the database
      VpcId: !Ref VPC

  
Outputs:
  VpcId:
    Value: !Ref VPC
    Export:
      Name: !Sub ${ProjectName}-${Environment}-Vpc
  PubSubnetA:
    Value: !Ref PublicSubnetA
  PubSubnetB:
    Value: !Ref PublicSubnetB
  PubSubnetC:
    Value: !Ref PublicSubnetC
  PrivSubnetA:
    Value: !Ref PrivateSubnetA
  PrivSubnetB:
    Value: !Ref PrivateSubnetB
  PrivSubnetC:
    Value: !Ref PrivateSubnetC
  DbSubnetA:
    Value: !Ref DBSubnetA
  DbSubnetB:
    Value: !Ref DBSubnetB
  DbSubnetC:
    Value: !Ref DBSubnetC

  DbSubnetGroup:
    Value: !Ref DBSubnetGroup
    Export:
      Name: !Sub ${ProjectName}-${Environment}-DbSubnetGroup

  LambdaSecurityGroup:
    Value: !Ref LambdaSecurityGroup
    Export:
      Name: !Sub ${ProjectName}-${Environment}-LambdaSecurityGroup

  PublicSubnets:
    Value:
      !Join [",", [!Ref PublicSubnetA, !Ref PublicSubnetB, !Ref PublicSubnetC]]
    Export:
      Name: !Sub ${ProjectName}-${Environment}-PublicSubnets
  PrivateSubnets:
    Value:
      !Join [
        ",",
        [!Ref PrivateSubnetA, !Ref PrivateSubnetB, !Ref PrivateSubnetC],
      ]
    Export:
      Name: !Sub ${ProjectName}-${Environment}-PrivateSubnets
  DBSubnets:
    Value: !Join [",", [!Ref DBSubnetA, !Ref DBSubnetB, !Ref DBSubnetC]]
    Export:
      Name: !Sub ${ProjectName}-${Environment}-DBSubnets
  Changelog:
    Value: !Ref Changelog
